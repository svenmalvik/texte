# From Monolith to Microservice: How Azure Powered Vipps To Become the No. 1 Payment Service in Norway.

Vipps released their payment app on May 30th, 2015. Five months later, they had exceeded a million active users. How in the world did they handle this explosive growth? Join Vipps and the API Management team as they do a technical breakdown on the journey from zero users to millions, and how Vipps used API Management, Azure DevOps, and Azure Kubernetes Service to transformed their business from an on-premise monolith, to a microservice driven architecture, as seamlessly as possible. Discover what to do and what not to do when scaling your services, and how to use API Management and Azure Kubernetes Service together to create a highly scalable system that provides frictionless experiences for your customers. 
1. Intro - TrueStory with illustration
Vipps used to develop its services in a more traditional way where teams were specialized in certain technologies. We had for example one team that knew all about logging and monitoring. They pretty much did all the work that was necessary to get services to send logs and metrics. Another team helped the dev teams to setup CI/CD pipelines so they could build and deploy. We worked like in a food-store where you have to stand in line to pay for what you just put in your basket. The same was true for Api-M. An API change could only be made by a specialized team because they where the only ones who knew what to do. 
Today, our dev teams are fully responsible for their services. That means that they do not have to stand in line anymore and wait for some days to set up a CI/CD pipeline in Azure DevOps or to make a change in Api-M. They do it all by themselves.
2. About Vipps - Bulletpoints
3. Agenda - Tell what we are going to do - Bulletpoints
    1. How we manage APIs with Api-M.
        1. Brief introduction to Api-M.
        2. How the policy model works.
        3. Deployment options in Api-M.
        4. Create a basic API and deploy it to Api-M.
        5. How we manage policies.
    2. How we manage services in AKS.
        1. Brief introduction to AKS.
        2. Short Helm introduction
        3. How we use Helm.
    3. Summarise 3 best practices that work for us.
1. Brief introduction to Api-M. >> APIs, Products, Users, Subscriptions - Illustration
2. API-M policy model - Illustration
3. API-M deployment options - Bulletpoints
    1. ARM - Describes the resources that are needed.
    2. REST
    3. AzureRm/Az pwsh - Wraps the REST API
    4. GitHub - ???
4. Explain ARM template for an API - CODE
5. Explain ARM template for a product - CODE
6. One APIM API per service - Illustration
7. Create basic swagger in an online editor - DEMO
8. Explain canary swagger.yaml file - CODE
9. Explain AzureRm module - Image of doc website
10. Create apimContext for uat with pwsh - DEMO
11. Deploy canary swagger.json api to apim with pwsh -DEMO
12. Explain canary policy file. - CODE
13. Deploy canary api policy - DEMO
14. Explain canary product -  CODE
15. Deploy canary product with pwsh - DEMO
16. Explain adding api to product - Illustration
17. Add canary api to canary product - DEMO
18. Optional: Test canary api with postman - DEMO
19. Explain properties - CODE
20. Deploy isCanaryDown property with pwsh - DEMO
21. Explain deploy-api v2 task group - Image
22. Explain Aks request routing - Illustration
23. Short Helm introduction - Bulletpoints+Images
24. Explain simplified Canary Helm chart - CODE
25. Explain Vipps-service helm templates - CODE
26. Explain DevOps with values file - CODE
27. Show canary CD pipeline - Images
28. Optional: Show Chameleon experiment for canary api policy with mocking - DEMO
29. What you have seen - Bulletpoints
    1. How APIM works.
    2. How dev teams can manage their APIs.
    3. How dev teams can deploy their services to AKS without too much knowledge about Helm and Kubernetes. 
30. Summarise 3 best practices - Bulletpoints
    1. If you give dev teams more responsibility, make sure they get the right tooling. 
    2. REST or AzureRm/Az over ARM for 1:1 relations between APIM APIs and Services
    3. ...
31. QA
32. About me - Bulletpoints
    1. Cloud Engineer.
    2. I like to build tooling.
    3. I like to see DevOps from the perspective of a developer.

